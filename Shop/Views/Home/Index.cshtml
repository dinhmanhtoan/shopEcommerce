@model HomeViewModel
<div class="container">
    <partial name="_WidgetInstances" model="Model.WidgetInstances.Where(x => x.WidgetZoneId == WidgetZoneIds.HomeFeatured)" />
@*    @await Component.InvokeAsync("CategoryFuture")*@
    <partial name="_WidgetInstances" model="Model.WidgetInstances.Where(x => x.WidgetZoneId == WidgetZoneIds.HomeMainContent)" />
    <partial name="_WidgetInstances" model="Model.WidgetInstances.Where(x => x.WidgetZoneId == WidgetZoneIds.HomeAfterMainContent)" />
</div>
@*@await Component.InvokeAsync("Pages")*@

@section Scripts{
    <script src="~/js/single.js"></script>
    <script>

        // time;
        $(document).ready(function () {
            // Set the date we're counting down to
            var countDownDate = new Date("June 20, 2021 00:00:00").getTime();

            // Update the count down every 1 second
            var x = setInterval(function () {

                // Get today's date and time
                var now = new Date().getTime();

                // Find the distance between now and the count down date
                var distance = countDownDate - now;

                // Time calculations for days, hours, minutes and seconds
                var days = Math.floor(distance / (1000 * 60 * 60 * 24));
                var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                var seconds = Math.floor((distance % (1000 * 60)) / 1000);

                // Display the result in the element with id="demo"
                $("#clockdiv").html(`
                            <div>
                                <span class="days">${days}</span>
                                <div class="smalltext">ngày</div>
                            </div>
                            <div>
                                <span class="hours">${hours}</span>
                                <div class="smalltext">giờ</div>
                            </div>
                            <div>
                                <span class="minutes">${minutes}</span>
                                <div class="smalltext">phút</div>
                            </div>
                            <div>
                                <span class="seconds">${seconds}</span>
                                <div class="smalltext">giây</div>
                            </div>`);

                // If the count down is finished, write some text
                if (distance < 0) {
                    clearInterval(x);
                    $("#clockdiv").innerHTML = "EXPIRED";
                }
            }, 1000);

        })
        //chon file
        @*$(document).ready(function () {
        var optionvalue = @Html.Raw(Json.Serialize(Model.Select(x => x.Options).ToList()));
        for (var i in optionvalue) {
            var item = optionvalue[i];
            if (item != null && item != undefined && item != "") {
            $(`input[name="inlineRadioOptions-${item[0].id}"]`).on('click', function () {
                var id = $(this).next().attr("data-id");
                $(`.form-check-label[data-id=${id}]`).removeClass('optionactive')
                $(this).prop('checked', $(this).is(':checked')).next().addClass("optionactive");
            });
            }
            };
        });*@
    </script>
}